# Load configuration
configfile: "config/config.yaml"

# Include rule files
include: "rules/preprocessing.smk"
include: "rules/popdata.smk"
include: "rules/faststructure.smk"
include: "rules/admixture.smk"
include: "rules/pcaone.smk"
include: "rules/vcf2pcacluster.smk"
include: "rules/relatedness.smk"
include: "rules/pixy.smk"
include: "rules/structure.smk"

def get_all_targets():
    """
    Build list of target files based on enabled analyses in config.
    This keeps the main Snakefile clean and makes it easy to 
    enable/disable analyses by editing the config file.
    Supports multiple projects, each with their own analyses.
    """
    targets = []
    
    # Iterate through each project
    for project in config["projects"].keys():
        project_config = config["projects"][project]
        analyses = project_config.get("analyses", {})
        params = project_config.get("parameters", {})
        
        # Get project-specific parameters
        k_values = params.get("k_values", [1, 2, 3])
        PCA_groupings = params.get("pca_plot", {}).get("color_by", ["Population"])
        
        # FastStructure targets
        if analyses.get("faststructure", False):
            targets.extend([
                expand(project + "/faststructure/faststructure.{k}.meanQ", 
                       k=k_values),
                expand(project + "/faststructure/faststructure.{k}.meanP", 
                       k=k_values),
                project + "/faststructure/chooseK_results.txt"
            ])
        
        # ADMIXTURE targets
        if analyses.get("admixture", False):
            targets.extend([
                expand(project + "/admixture/biallelic_snps_thinned.{k}.Q", 
                       k=k_values),
                expand(project + "/admixture/biallelic_snps_thinned.{k}.P", 
                       k=k_values),
                project + "/admixture/chooseK_results.txt"
            ])
        
        # STRUCTURE targets
        if analyses.get("structure", False):
            n_reps = params.get("structure", {}).get("replicates", 1)
            targets.extend([
                expand(project + "/structure/structure.K{k}.R{r}_f", 
                       k=k_values, 
                       r=range(1, n_reps + 1)),
                expand(project + "/structure/plots/K{k}_aligned.pdf", 
                       k=k_values)
            ])
        
        # PCAone targets (standard)
        if analyses.get("pcaone", False):
            targets.extend([
                project + "/pcaone/PCA.eigvecs",
                project + "/pcaone/PCA.eigvals",
                expand("{project}/final_plots/PCA-{color_by}.pdf",
                    project=project,
                    color_by=PCA_groupings)
            ])

        # PCAone targets (EMU)
        if analyses.get("pcaone_emu", False):
            targets.extend([
                project + "/pcaone_EMU/PCA_EMU.eigvecs",
                project + "/pcaone_EMU/PCA_EMU.eigvals"
            ])

        # PCAone targets (with coverage thresholds)
        if analyses.get("pcaone_miss", False):
            miss_values = params.get("PCAone", {}).get("miss", [0.5])
            targets.extend([
                expand(project + "/pcaone_miss{miss}/PCA_miss{miss}.eigvecs", 
                       miss=miss_values),
                expand(project + "/pcaone_miss{miss}/PCA_miss{miss}.eigvals", 
                       miss=miss_values)
            ])
        
        # VCF2PCACluster targets
        if analyses.get("vcf2pcacluster", False):
            vcf2pca_params = params.get("vcf2pcacluster", {}).get("SNP_filtering", {})
            miss_values = vcf2pca_params.get("Miss", [0.5])
            maf_values = vcf2pca_params.get("MAF", [0])
            
            targets.extend(
                expand(
                    project + "/vcf2pcacluster_miss{miss}_MAF{MAF}/vcf2pcacluster_miss{miss}_MAF{MAF}.eigenvec",
                    miss=miss_values,
                    MAF=maf_values
                )
            )
            targets.extend(
                expand(
                    project + "/vcf2pcacluster_miss{miss}_MAF{MAF}/vcf2pcacluster_miss{miss}_MAF{MAF}.eigenval",
                    miss=miss_values,
                    MAF=maf_values
                )
            )
        
        # Pixy targets
        if analyses.get("pixy", False):
            targets.extend([
                project + "/pixy/pixy_pi-summary.txt",
                project + "/pixy/pixy_fst-summary.txt",
                project + "/pixy/pixy_dxy-summary.txt"
            ])
        
        # Relatedness targets
        if analyses.get("relatedness", False):
            targets.extend([
                project + "/relatedness/out.relatedness",
                project + "/relatedness/out.relatedness2"
            ])

    return targets

# Main target rule
rule all:
    input:
        get_all_targets()
